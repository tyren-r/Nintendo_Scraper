{"ast":null,"code":"\"use strict\";\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isTraversal = void 0;\nvar reName = /^[^\\\\#]?(?:\\\\(?:[\\da-f]{1,6}\\s?|.)|[\\w\\-\\u00b0-\\uFFFF])+/;\nvar reEscape = /\\\\([\\da-f]{1,6}\\s?|(\\s)|.)/gi; // Modified version of https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L87\n\nvar reAttr = /^\\s*(?:(\\*|[-\\w]*)\\|)?((?:\\\\.|[\\w\\u00b0-\\uFFFF-])+)\\s*(?:(\\S?)=\\s*(?:(['\"])((?:[^\\\\]|\\\\[^])*?)\\4|(#?(?:\\\\.|[\\w\\u00b0-\\uFFFF-])*)|)|)\\s*([iIsS])?\\s*\\]/;\nvar actionTypes = {\n  undefined: \"exists\",\n  \"\": \"equals\",\n  \"~\": \"element\",\n  \"^\": \"start\",\n  $: \"end\",\n  \"*\": \"any\",\n  \"!\": \"not\",\n  \"|\": \"hyphen\"\n};\nvar Traversals = {\n  \">\": \"child\",\n  \"<\": \"parent\",\n  \"~\": \"sibling\",\n  \"+\": \"adjacent\"\n};\nvar attribSelectors = {\n  \"#\": [\"id\", \"equals\"],\n  \".\": [\"class\", \"element\"]\n}; // Pseudos, whose data property is parsed as well.\n\nvar unpackPseudos = new Set([\"has\", \"not\", \"matches\", \"is\", \"host\", \"host-context\"]);\nvar traversalNames = new Set(__spreadArray([\"descendant\"], Object.keys(Traversals).map(function (k) {\n  return Traversals[k];\n})));\n/**\n * Attributes that are case-insensitive in HTML.\n *\n * @private\n * @see https://html.spec.whatwg.org/multipage/semantics-other.html#case-sensitivity-of-selectors\n */\n\nvar caseInsensitiveAttributes = new Set([\"accept\", \"accept-charset\", \"align\", \"alink\", \"axis\", \"bgcolor\", \"charset\", \"checked\", \"clear\", \"codetype\", \"color\", \"compact\", \"declare\", \"defer\", \"dir\", \"direction\", \"disabled\", \"enctype\", \"face\", \"frame\", \"hreflang\", \"http-equiv\", \"lang\", \"language\", \"link\", \"media\", \"method\", \"multiple\", \"nohref\", \"noresize\", \"noshade\", \"nowrap\", \"readonly\", \"rel\", \"rev\", \"rules\", \"scope\", \"scrolling\", \"selected\", \"shape\", \"target\", \"text\", \"type\", \"valign\", \"valuetype\", \"vlink\"]);\n/**\n * Checks whether a specific selector is a traversal.\n * This is useful eg. in swapping the order of elements that\n * are not traversals.\n *\n * @param selector Selector to check.\n */\n\nfunction isTraversal(selector) {\n  return traversalNames.has(selector.type);\n}\n\nexports.isTraversal = isTraversal;\nvar stripQuotesFromPseudos = new Set([\"contains\", \"icontains\"]);\nvar quotes = new Set(['\"', \"'\"]); // Unescape function taken from https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L152\n\nfunction funescape(_, escaped, escapedWhitespace) {\n  var high = parseInt(escaped, 16) - 0x10000; // NaN means non-codepoint\n\n  return high !== high || escapedWhitespace ? escaped : high < 0 ? // BMP codepoint\n  String.fromCharCode(high + 0x10000) : // Supplemental Plane codepoint (surrogate pair)\n  String.fromCharCode(high >> 10 | 0xd800, high & 0x3ff | 0xdc00);\n}\n\nfunction unescapeCSS(str) {\n  return str.replace(reEscape, funescape);\n}\n\nfunction isWhitespace(c) {\n  return c === \" \" || c === \"\\n\" || c === \"\\t\" || c === \"\\f\" || c === \"\\r\";\n}\n/**\n * Parses `selector`, optionally with the passed `options`.\n *\n * @param selector Selector to parse.\n * @param options Options for parsing.\n * @returns Returns a two-dimensional array.\n * The first dimension represents selectors separated by commas (eg. `sub1, sub2`),\n * the second contains the relevant tokens for that selector.\n */\n\n\nfunction parse(selector, options) {\n  var subselects = [];\n  var endIndex = parseSelector(subselects, \"\" + selector, options, 0);\n\n  if (endIndex < selector.length) {\n    throw new Error(\"Unmatched selector: \" + selector.slice(endIndex));\n  }\n\n  return subselects;\n}\n\nexports.default = parse;\n\nfunction parseSelector(subselects, selector, options, selectorIndex) {\n  var _a, _b;\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  var tokens = [];\n  var sawWS = false;\n\n  function getName(offset) {\n    var match = selector.slice(selectorIndex + offset).match(reName);\n\n    if (!match) {\n      throw new Error(\"Expected name, found \" + selector.slice(selectorIndex));\n    }\n\n    var name = match[0];\n    selectorIndex += offset + name.length;\n    return unescapeCSS(name);\n  }\n\n  function stripWhitespace(offset) {\n    while (isWhitespace(selector.charAt(selectorIndex + offset))) offset++;\n\n    selectorIndex += offset;\n  }\n\n  function isEscaped(pos) {\n    var slashCount = 0;\n\n    while (selector.charAt(--pos) === \"\\\\\") slashCount++;\n\n    return (slashCount & 1) === 1;\n  }\n\n  function ensureNotTraversal() {\n    if (tokens.length > 0 && isTraversal(tokens[tokens.length - 1])) {\n      throw new Error(\"Did not expect successive traversals.\");\n    }\n  }\n\n  stripWhitespace(0);\n\n  while (selector !== \"\") {\n    var firstChar = selector.charAt(selectorIndex);\n\n    if (isWhitespace(firstChar)) {\n      sawWS = true;\n      stripWhitespace(1);\n    } else if (firstChar in Traversals) {\n      ensureNotTraversal();\n      tokens.push({\n        type: Traversals[firstChar]\n      });\n      sawWS = false;\n      stripWhitespace(1);\n    } else if (firstChar === \",\") {\n      if (tokens.length === 0) {\n        throw new Error(\"Empty sub-selector\");\n      }\n\n      subselects.push(tokens);\n      tokens = [];\n      sawWS = false;\n      stripWhitespace(1);\n    } else if (firstChar === \"/\" && selector.charAt(selectorIndex + 1) === \"*\") {\n      var endIndex = selector.indexOf(\"*/\", selectorIndex + 2);\n\n      if (endIndex < 0) {\n        throw new Error(\"Comment was not terminated\");\n      }\n\n      selectorIndex = endIndex + 2;\n    } else {\n      if (sawWS) {\n        ensureNotTraversal();\n        tokens.push({\n          type: \"descendant\"\n        });\n        sawWS = false;\n      }\n\n      if (firstChar in attribSelectors) {\n        var _c = attribSelectors[firstChar],\n            name_1 = _c[0],\n            action = _c[1];\n        tokens.push({\n          type: \"attribute\",\n          name: name_1,\n          action: action,\n          value: getName(1),\n          namespace: null,\n          // TODO: Add quirksMode option, which makes `ignoreCase` `true` for HTML.\n          ignoreCase: options.xmlMode ? null : false\n        });\n      } else if (firstChar === \"[\") {\n        var attributeMatch = selector.slice(selectorIndex + 1).match(reAttr);\n\n        if (!attributeMatch) {\n          throw new Error(\"Malformed attribute selector: \" + selector.slice(selectorIndex));\n        }\n\n        var completeSelector = attributeMatch[0],\n            _d = attributeMatch[1],\n            namespace = _d === void 0 ? null : _d,\n            baseName = attributeMatch[2],\n            actionType = attributeMatch[3],\n            _e = attributeMatch[5],\n            quotedValue = _e === void 0 ? \"\" : _e,\n            _f = attributeMatch[6],\n            value = _f === void 0 ? quotedValue : _f,\n            forceIgnore = attributeMatch[7];\n        selectorIndex += completeSelector.length + 1;\n        var name_2 = unescapeCSS(baseName);\n\n        if ((_a = options.lowerCaseAttributeNames) !== null && _a !== void 0 ? _a : !options.xmlMode) {\n          name_2 = name_2.toLowerCase();\n        }\n\n        var ignoreCase = // If the forceIgnore flag is set (either `i` or `s`), use that value\n        forceIgnore ? forceIgnore.toLowerCase() === \"i\" : // If `xmlMode` is set, there are no rules; return `null`.\n        options.xmlMode ? null : // Otherwise, use the `caseInsensitiveAttributes` list.\n        caseInsensitiveAttributes.has(name_2);\n        var attributeSelector = {\n          type: \"attribute\",\n          name: name_2,\n          action: actionTypes[actionType],\n          value: unescapeCSS(value),\n          namespace: namespace,\n          ignoreCase: ignoreCase\n        };\n        tokens.push(attributeSelector);\n      } else if (firstChar === \":\") {\n        if (selector.charAt(selectorIndex + 1) === \":\") {\n          tokens.push({\n            type: \"pseudo-element\",\n            name: getName(2).toLowerCase()\n          });\n          continue;\n        }\n\n        var name_3 = getName(1).toLowerCase();\n        var data = null;\n\n        if (selector.charAt(selectorIndex) === \"(\") {\n          if (unpackPseudos.has(name_3)) {\n            if (quotes.has(selector.charAt(selectorIndex + 1))) {\n              throw new Error(\"Pseudo-selector \" + name_3 + \" cannot be quoted\");\n            }\n\n            data = [];\n            selectorIndex = parseSelector(data, selector, options, selectorIndex + 1);\n\n            if (selector.charAt(selectorIndex) !== \")\") {\n              throw new Error(\"Missing closing parenthesis in :\" + name_3 + \" (\" + selector + \")\");\n            }\n\n            selectorIndex += 1;\n          } else {\n            selectorIndex += 1;\n            var start = selectorIndex;\n            var counter = 1;\n\n            for (; counter > 0 && selectorIndex < selector.length; selectorIndex++) {\n              if (selector.charAt(selectorIndex) === \"(\" && !isEscaped(selectorIndex)) {\n                counter++;\n              } else if (selector.charAt(selectorIndex) === \")\" && !isEscaped(selectorIndex)) {\n                counter--;\n              }\n            }\n\n            if (counter) {\n              throw new Error(\"Parenthesis not matched\");\n            }\n\n            data = selector.slice(start, selectorIndex - 1);\n\n            if (stripQuotesFromPseudos.has(name_3)) {\n              var quot = data.charAt(0);\n\n              if (quot === data.slice(-1) && quotes.has(quot)) {\n                data = data.slice(1, -1);\n              }\n\n              data = unescapeCSS(data);\n            }\n          }\n        }\n\n        tokens.push({\n          type: \"pseudo\",\n          name: name_3,\n          data: data\n        });\n      } else {\n        var namespace = null;\n        var name_4 = void 0;\n\n        if (firstChar === \"*\") {\n          selectorIndex += 1;\n          name_4 = \"*\";\n        } else if (reName.test(selector.slice(selectorIndex))) {\n          if (selector.charAt(selectorIndex) === \"|\") {\n            namespace = \"\";\n            selectorIndex += 1;\n          }\n\n          name_4 = getName(0);\n        } else {\n          /*\n           * We have finished parsing the selector.\n           * Remove descendant tokens at the end if they exist,\n           * and return the last index, so that parsing can be\n           * picked up from here.\n           */\n          if (tokens.length && tokens[tokens.length - 1].type === \"descendant\") {\n            tokens.pop();\n          }\n\n          addToken(subselects, tokens);\n          return selectorIndex;\n        }\n\n        if (selector.charAt(selectorIndex) === \"|\") {\n          namespace = name_4;\n\n          if (selector.charAt(selectorIndex + 1) === \"*\") {\n            name_4 = \"*\";\n            selectorIndex += 2;\n          } else {\n            name_4 = getName(1);\n          }\n        }\n\n        if (name_4 === \"*\") {\n          tokens.push({\n            type: \"universal\",\n            namespace: namespace\n          });\n        } else {\n          if ((_b = options.lowerCaseTags) !== null && _b !== void 0 ? _b : !options.xmlMode) {\n            name_4 = name_4.toLowerCase();\n          }\n\n          tokens.push({\n            type: \"tag\",\n            name: name_4,\n            namespace: namespace\n          });\n        }\n      }\n    }\n  }\n\n  addToken(subselects, tokens);\n  return selectorIndex;\n}\n\nfunction addToken(subselects, tokens) {\n  if (subselects.length > 0 && tokens.length === 0) {\n    throw new Error(\"Empty sub-selector\");\n  }\n\n  subselects.push(tokens);\n}","map":{"version":3,"sources":["/Users/ph/sites/retro-gamer/node_modules/cheerio-select/node_modules/css-what/lib/parse.js"],"names":["__spreadArray","to","from","i","il","length","j","Object","defineProperty","exports","value","isTraversal","reName","reEscape","reAttr","actionTypes","undefined","$","Traversals","attribSelectors","unpackPseudos","Set","traversalNames","keys","map","k","caseInsensitiveAttributes","selector","has","type","stripQuotesFromPseudos","quotes","funescape","_","escaped","escapedWhitespace","high","parseInt","String","fromCharCode","unescapeCSS","str","replace","isWhitespace","c","parse","options","subselects","endIndex","parseSelector","Error","slice","default","selectorIndex","_a","_b","tokens","sawWS","getName","offset","match","name","stripWhitespace","charAt","isEscaped","pos","slashCount","ensureNotTraversal","firstChar","push","indexOf","_c","name_1","action","namespace","ignoreCase","xmlMode","attributeMatch","completeSelector","_d","baseName","actionType","_e","quotedValue","_f","forceIgnore","name_2","lowerCaseAttributeNames","toLowerCase","attributeSelector","name_3","data","start","counter","quot","name_4","test","pop","addToken","lowerCaseTags"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isTraversal = void 0;\nvar reName = /^[^\\\\#]?(?:\\\\(?:[\\da-f]{1,6}\\s?|.)|[\\w\\-\\u00b0-\\uFFFF])+/;\nvar reEscape = /\\\\([\\da-f]{1,6}\\s?|(\\s)|.)/gi;\n// Modified version of https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L87\nvar reAttr = /^\\s*(?:(\\*|[-\\w]*)\\|)?((?:\\\\.|[\\w\\u00b0-\\uFFFF-])+)\\s*(?:(\\S?)=\\s*(?:(['\"])((?:[^\\\\]|\\\\[^])*?)\\4|(#?(?:\\\\.|[\\w\\u00b0-\\uFFFF-])*)|)|)\\s*([iIsS])?\\s*\\]/;\nvar actionTypes = {\n    undefined: \"exists\",\n    \"\": \"equals\",\n    \"~\": \"element\",\n    \"^\": \"start\",\n    $: \"end\",\n    \"*\": \"any\",\n    \"!\": \"not\",\n    \"|\": \"hyphen\",\n};\nvar Traversals = {\n    \">\": \"child\",\n    \"<\": \"parent\",\n    \"~\": \"sibling\",\n    \"+\": \"adjacent\",\n};\nvar attribSelectors = {\n    \"#\": [\"id\", \"equals\"],\n    \".\": [\"class\", \"element\"],\n};\n// Pseudos, whose data property is parsed as well.\nvar unpackPseudos = new Set([\n    \"has\",\n    \"not\",\n    \"matches\",\n    \"is\",\n    \"host\",\n    \"host-context\",\n]);\nvar traversalNames = new Set(__spreadArray([\n    \"descendant\"\n], Object.keys(Traversals).map(function (k) { return Traversals[k]; })));\n/**\n * Attributes that are case-insensitive in HTML.\n *\n * @private\n * @see https://html.spec.whatwg.org/multipage/semantics-other.html#case-sensitivity-of-selectors\n */\nvar caseInsensitiveAttributes = new Set([\n    \"accept\",\n    \"accept-charset\",\n    \"align\",\n    \"alink\",\n    \"axis\",\n    \"bgcolor\",\n    \"charset\",\n    \"checked\",\n    \"clear\",\n    \"codetype\",\n    \"color\",\n    \"compact\",\n    \"declare\",\n    \"defer\",\n    \"dir\",\n    \"direction\",\n    \"disabled\",\n    \"enctype\",\n    \"face\",\n    \"frame\",\n    \"hreflang\",\n    \"http-equiv\",\n    \"lang\",\n    \"language\",\n    \"link\",\n    \"media\",\n    \"method\",\n    \"multiple\",\n    \"nohref\",\n    \"noresize\",\n    \"noshade\",\n    \"nowrap\",\n    \"readonly\",\n    \"rel\",\n    \"rev\",\n    \"rules\",\n    \"scope\",\n    \"scrolling\",\n    \"selected\",\n    \"shape\",\n    \"target\",\n    \"text\",\n    \"type\",\n    \"valign\",\n    \"valuetype\",\n    \"vlink\",\n]);\n/**\n * Checks whether a specific selector is a traversal.\n * This is useful eg. in swapping the order of elements that\n * are not traversals.\n *\n * @param selector Selector to check.\n */\nfunction isTraversal(selector) {\n    return traversalNames.has(selector.type);\n}\nexports.isTraversal = isTraversal;\nvar stripQuotesFromPseudos = new Set([\"contains\", \"icontains\"]);\nvar quotes = new Set(['\"', \"'\"]);\n// Unescape function taken from https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L152\nfunction funescape(_, escaped, escapedWhitespace) {\n    var high = parseInt(escaped, 16) - 0x10000;\n    // NaN means non-codepoint\n    return high !== high || escapedWhitespace\n        ? escaped\n        : high < 0\n            ? // BMP codepoint\n                String.fromCharCode(high + 0x10000)\n            : // Supplemental Plane codepoint (surrogate pair)\n                String.fromCharCode((high >> 10) | 0xd800, (high & 0x3ff) | 0xdc00);\n}\nfunction unescapeCSS(str) {\n    return str.replace(reEscape, funescape);\n}\nfunction isWhitespace(c) {\n    return c === \" \" || c === \"\\n\" || c === \"\\t\" || c === \"\\f\" || c === \"\\r\";\n}\n/**\n * Parses `selector`, optionally with the passed `options`.\n *\n * @param selector Selector to parse.\n * @param options Options for parsing.\n * @returns Returns a two-dimensional array.\n * The first dimension represents selectors separated by commas (eg. `sub1, sub2`),\n * the second contains the relevant tokens for that selector.\n */\nfunction parse(selector, options) {\n    var subselects = [];\n    var endIndex = parseSelector(subselects, \"\" + selector, options, 0);\n    if (endIndex < selector.length) {\n        throw new Error(\"Unmatched selector: \" + selector.slice(endIndex));\n    }\n    return subselects;\n}\nexports.default = parse;\nfunction parseSelector(subselects, selector, options, selectorIndex) {\n    var _a, _b;\n    if (options === void 0) { options = {}; }\n    var tokens = [];\n    var sawWS = false;\n    function getName(offset) {\n        var match = selector.slice(selectorIndex + offset).match(reName);\n        if (!match) {\n            throw new Error(\"Expected name, found \" + selector.slice(selectorIndex));\n        }\n        var name = match[0];\n        selectorIndex += offset + name.length;\n        return unescapeCSS(name);\n    }\n    function stripWhitespace(offset) {\n        while (isWhitespace(selector.charAt(selectorIndex + offset)))\n            offset++;\n        selectorIndex += offset;\n    }\n    function isEscaped(pos) {\n        var slashCount = 0;\n        while (selector.charAt(--pos) === \"\\\\\")\n            slashCount++;\n        return (slashCount & 1) === 1;\n    }\n    function ensureNotTraversal() {\n        if (tokens.length > 0 && isTraversal(tokens[tokens.length - 1])) {\n            throw new Error(\"Did not expect successive traversals.\");\n        }\n    }\n    stripWhitespace(0);\n    while (selector !== \"\") {\n        var firstChar = selector.charAt(selectorIndex);\n        if (isWhitespace(firstChar)) {\n            sawWS = true;\n            stripWhitespace(1);\n        }\n        else if (firstChar in Traversals) {\n            ensureNotTraversal();\n            tokens.push({ type: Traversals[firstChar] });\n            sawWS = false;\n            stripWhitespace(1);\n        }\n        else if (firstChar === \",\") {\n            if (tokens.length === 0) {\n                throw new Error(\"Empty sub-selector\");\n            }\n            subselects.push(tokens);\n            tokens = [];\n            sawWS = false;\n            stripWhitespace(1);\n        }\n        else if (firstChar === \"/\" &&\n            selector.charAt(selectorIndex + 1) === \"*\") {\n            var endIndex = selector.indexOf(\"*/\", selectorIndex + 2);\n            if (endIndex < 0) {\n                throw new Error(\"Comment was not terminated\");\n            }\n            selectorIndex = endIndex + 2;\n        }\n        else {\n            if (sawWS) {\n                ensureNotTraversal();\n                tokens.push({ type: \"descendant\" });\n                sawWS = false;\n            }\n            if (firstChar in attribSelectors) {\n                var _c = attribSelectors[firstChar], name_1 = _c[0], action = _c[1];\n                tokens.push({\n                    type: \"attribute\",\n                    name: name_1,\n                    action: action,\n                    value: getName(1),\n                    namespace: null,\n                    // TODO: Add quirksMode option, which makes `ignoreCase` `true` for HTML.\n                    ignoreCase: options.xmlMode ? null : false,\n                });\n            }\n            else if (firstChar === \"[\") {\n                var attributeMatch = selector\n                    .slice(selectorIndex + 1)\n                    .match(reAttr);\n                if (!attributeMatch) {\n                    throw new Error(\"Malformed attribute selector: \" + selector.slice(selectorIndex));\n                }\n                var completeSelector = attributeMatch[0], _d = attributeMatch[1], namespace = _d === void 0 ? null : _d, baseName = attributeMatch[2], actionType = attributeMatch[3], _e = attributeMatch[5], quotedValue = _e === void 0 ? \"\" : _e, _f = attributeMatch[6], value = _f === void 0 ? quotedValue : _f, forceIgnore = attributeMatch[7];\n                selectorIndex += completeSelector.length + 1;\n                var name_2 = unescapeCSS(baseName);\n                if ((_a = options.lowerCaseAttributeNames) !== null && _a !== void 0 ? _a : !options.xmlMode) {\n                    name_2 = name_2.toLowerCase();\n                }\n                var ignoreCase = \n                // If the forceIgnore flag is set (either `i` or `s`), use that value\n                forceIgnore\n                    ? forceIgnore.toLowerCase() === \"i\"\n                    : // If `xmlMode` is set, there are no rules; return `null`.\n                        options.xmlMode\n                            ? null\n                            : // Otherwise, use the `caseInsensitiveAttributes` list.\n                                caseInsensitiveAttributes.has(name_2);\n                var attributeSelector = {\n                    type: \"attribute\",\n                    name: name_2,\n                    action: actionTypes[actionType],\n                    value: unescapeCSS(value),\n                    namespace: namespace,\n                    ignoreCase: ignoreCase,\n                };\n                tokens.push(attributeSelector);\n            }\n            else if (firstChar === \":\") {\n                if (selector.charAt(selectorIndex + 1) === \":\") {\n                    tokens.push({\n                        type: \"pseudo-element\",\n                        name: getName(2).toLowerCase(),\n                    });\n                    continue;\n                }\n                var name_3 = getName(1).toLowerCase();\n                var data = null;\n                if (selector.charAt(selectorIndex) === \"(\") {\n                    if (unpackPseudos.has(name_3)) {\n                        if (quotes.has(selector.charAt(selectorIndex + 1))) {\n                            throw new Error(\"Pseudo-selector \" + name_3 + \" cannot be quoted\");\n                        }\n                        data = [];\n                        selectorIndex = parseSelector(data, selector, options, selectorIndex + 1);\n                        if (selector.charAt(selectorIndex) !== \")\") {\n                            throw new Error(\"Missing closing parenthesis in :\" + name_3 + \" (\" + selector + \")\");\n                        }\n                        selectorIndex += 1;\n                    }\n                    else {\n                        selectorIndex += 1;\n                        var start = selectorIndex;\n                        var counter = 1;\n                        for (; counter > 0 && selectorIndex < selector.length; selectorIndex++) {\n                            if (selector.charAt(selectorIndex) === \"(\" &&\n                                !isEscaped(selectorIndex)) {\n                                counter++;\n                            }\n                            else if (selector.charAt(selectorIndex) === \")\" &&\n                                !isEscaped(selectorIndex)) {\n                                counter--;\n                            }\n                        }\n                        if (counter) {\n                            throw new Error(\"Parenthesis not matched\");\n                        }\n                        data = selector.slice(start, selectorIndex - 1);\n                        if (stripQuotesFromPseudos.has(name_3)) {\n                            var quot = data.charAt(0);\n                            if (quot === data.slice(-1) && quotes.has(quot)) {\n                                data = data.slice(1, -1);\n                            }\n                            data = unescapeCSS(data);\n                        }\n                    }\n                }\n                tokens.push({ type: \"pseudo\", name: name_3, data: data });\n            }\n            else {\n                var namespace = null;\n                var name_4 = void 0;\n                if (firstChar === \"*\") {\n                    selectorIndex += 1;\n                    name_4 = \"*\";\n                }\n                else if (reName.test(selector.slice(selectorIndex))) {\n                    if (selector.charAt(selectorIndex) === \"|\") {\n                        namespace = \"\";\n                        selectorIndex += 1;\n                    }\n                    name_4 = getName(0);\n                }\n                else {\n                    /*\n                     * We have finished parsing the selector.\n                     * Remove descendant tokens at the end if they exist,\n                     * and return the last index, so that parsing can be\n                     * picked up from here.\n                     */\n                    if (tokens.length &&\n                        tokens[tokens.length - 1].type === \"descendant\") {\n                        tokens.pop();\n                    }\n                    addToken(subselects, tokens);\n                    return selectorIndex;\n                }\n                if (selector.charAt(selectorIndex) === \"|\") {\n                    namespace = name_4;\n                    if (selector.charAt(selectorIndex + 1) === \"*\") {\n                        name_4 = \"*\";\n                        selectorIndex += 2;\n                    }\n                    else {\n                        name_4 = getName(1);\n                    }\n                }\n                if (name_4 === \"*\") {\n                    tokens.push({ type: \"universal\", namespace: namespace });\n                }\n                else {\n                    if ((_b = options.lowerCaseTags) !== null && _b !== void 0 ? _b : !options.xmlMode) {\n                        name_4 = name_4.toLowerCase();\n                    }\n                    tokens.push({ type: \"tag\", name: name_4, namespace: namespace });\n                }\n            }\n        }\n    }\n    addToken(subselects, tokens);\n    return selectorIndex;\n}\nfunction addToken(subselects, tokens) {\n    if (subselects.length > 0 && tokens.length === 0) {\n        throw new Error(\"Empty sub-selector\");\n    }\n    subselects.push(tokens);\n}\n"]},"metadata":{},"sourceType":"script"}