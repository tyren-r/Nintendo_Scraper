{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.merge = exports.contains = exports.root = exports.parseHTML = exports.text = exports.xml = exports.html = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar options_1 = tslib_1.__importStar(require(\"./options\"));\n\nvar cheerio_select_1 = require(\"cheerio-select\");\n\nvar htmlparser2_1 = require(\"htmlparser2\");\n\nvar parse5_1 = require(\"./parsers/parse5\");\n\nvar htmlparser2_2 = require(\"./parsers/htmlparser2\");\n/**\n * Helper function to render a DOM.\n *\n * @param that - Cheerio instance to render.\n * @param dom - The DOM to render. Defaults to `that`'s root.\n * @param options - Options for rendering.\n * @returns The rendered document.\n */\n\n\nfunction render(that, dom, options) {\n  var _a, _b;\n\n  if (!dom) {\n    if ((_a = that === null || that === void 0 ? void 0 : that._root) === null || _a === void 0 ? void 0 : _a.children) {\n      dom = that._root.children;\n    } else {\n      return '';\n    }\n  } else if (typeof dom === 'string') {\n    dom = cheerio_select_1.select(dom, (_b = that === null || that === void 0 ? void 0 : that._root) !== null && _b !== void 0 ? _b : [], options);\n  }\n\n  return options.xmlMode || options._useHtmlParser2 ? // FIXME: Pull in new version of dom-serializer to fix this.\n  htmlparser2_2.render(dom, options) : parse5_1.render(dom);\n}\n/**\n * Checks if a passed object is an options object.\n *\n * @param dom - Object to check if it is an options object.\n * @returns Whether the object is an options object.\n */\n\n\nfunction isOptions(dom) {\n  return typeof dom === 'object' && dom != null && !('length' in dom) && !('type' in dom);\n}\n\nfunction html(dom, options) {\n  /*\n   * Be flexible about parameters, sometimes we call html(),\n   * with options as only parameter\n   * check dom argument for dom element specific properties\n   * assume there is no 'length' or 'type' properties in the options object\n   */\n  if (!options && isOptions(dom)) {\n    options = dom;\n    dom = undefined;\n  }\n  /*\n   * Sometimes `$.html()` is used without preloading html,\n   * so fallback non-existing options to the default ones.\n   */\n\n\n  options = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, options_1.default), this ? this._options : {}), options_1.flatten(options !== null && options !== void 0 ? options : {}));\n  return render(this || undefined, dom, options);\n}\n\nexports.html = html;\n/**\n * Render the document as XML.\n *\n * @param dom - Element to render.\n * @returns THe rendered document.\n */\n\nfunction xml(dom) {\n  var options = tslib_1.__assign(tslib_1.__assign({}, this._options), {\n    xmlMode: true\n  });\n\n  return render(this, dom, options);\n}\n\nexports.xml = xml;\n/**\n * Render the document as text.\n *\n * @param elements - Elements to render.\n * @returns The rendered document.\n */\n\nfunction text(elements) {\n  var elems = elements ? elements : this ? this.root() : [];\n  var ret = '';\n\n  for (var i = 0; i < elems.length; i++) {\n    var elem = elems[i];\n    if (htmlparser2_1.DomUtils.isText(elem)) ret += elem.data;else if (htmlparser2_1.DomUtils.hasChildren(elem) && elem.type !== htmlparser2_1.ElementType.Comment && elem.type !== htmlparser2_1.ElementType.Script && elem.type !== htmlparser2_1.ElementType.Style) {\n      ret += text(elem.children);\n    }\n  }\n\n  return ret;\n}\n\nexports.text = text;\n\nfunction parseHTML(data, context, keepScripts) {\n  if (keepScripts === void 0) {\n    keepScripts = typeof context === 'boolean' ? context : false;\n  }\n\n  if (!data || typeof data !== 'string') {\n    return null;\n  }\n\n  if (typeof context === 'boolean') {\n    keepScripts = context;\n  }\n\n  var parsed = this.load(data, options_1.default, false);\n\n  if (!keepScripts) {\n    parsed('script').remove();\n  }\n  /*\n   * The `children` array is used by Cheerio internally to group elements that\n   * share the same parents. When nodes created through `parseHTML` are\n   * inserted into previously-existing DOM structures, they will be removed\n   * from the `children` array. The results of `parseHTML` should remain\n   * constant across these operations, so a shallow copy should be returned.\n   */\n\n\n  return parsed.root()[0].children.slice();\n}\n\nexports.parseHTML = parseHTML;\n/**\n * Sometimes you need to work with the top-level root element. To query it, you\n * can use `$.root()`.\n *\n * @example\n *\n * ```js\n * $.root().append('<ul id=\"vegetables\"></ul>').html();\n * //=> <ul id=\"fruits\">...</ul><ul id=\"vegetables\"></ul>\n * ```\n *\n * @returns Cheerio instance wrapping the root node.\n * @alias Cheerio.root\n */\n\nfunction root() {\n  var fn = this;\n  return fn(this._root);\n}\n\nexports.root = root;\n/**\n * Checks to see if the `contained` DOM element is a descendant of the\n * `container` DOM element.\n *\n * @param container - Potential parent node.\n * @param contained - Potential child node.\n * @returns Indicates if the nodes contain one another.\n * @alias Cheerio.contains\n * @see {@link https://api.jquery.com/jQuery.contains/}\n */\n\nfunction contains(container, contained) {\n  // According to the jQuery API, an element does not \"contain\" itself\n  if (contained === container) {\n    return false;\n  }\n  /*\n   * Step up the descendants, stopping when the root element is reached\n   * (signaled by `.parent` returning a reference to the same object)\n   */\n\n\n  var next = contained;\n\n  while (next && next !== next.parent) {\n    next = next.parent;\n\n    if (next === container) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexports.contains = contains;\n/**\n * $.merge().\n *\n * @param arr1 - First array.\n * @param arr2 - Second array.\n * @returns `arr1`, with elements of `arr2` inserted.\n * @alias Cheerio.merge\n * @see {@link https://api.jquery.com/jQuery.merge/}\n */\n\nfunction merge(arr1, arr2) {\n  if (!isArrayLike(arr1) || !isArrayLike(arr2)) {\n    return;\n  }\n\n  var newLength = arr1.length;\n  var len = +arr2.length;\n\n  for (var i = 0; i < len; i++) {\n    arr1[newLength++] = arr2[i];\n  }\n\n  arr1.length = newLength;\n  return arr1;\n}\n\nexports.merge = merge;\n/**\n * @param item - Item to check.\n * @returns Indicates if the item is array-like.\n */\n\nfunction isArrayLike(item) {\n  if (Array.isArray(item)) {\n    return true;\n  }\n\n  if (typeof item !== 'object' || !Object.prototype.hasOwnProperty.call(item, 'length') || typeof item.length !== 'number' || item.length < 0) {\n    return false;\n  }\n\n  for (var i = 0; i < item.length; i++) {\n    if (!(i in item)) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/ph/sites/retro-gamer/node_modules/cheerio/lib/static.js"],"names":["Object","defineProperty","exports","value","merge","contains","root","parseHTML","text","xml","html","tslib_1","require","options_1","__importStar","cheerio_select_1","htmlparser2_1","parse5_1","htmlparser2_2","render","that","dom","options","_a","_b","_root","children","select","xmlMode","_useHtmlParser2","isOptions","undefined","__assign","default","_options","flatten","elements","elems","ret","i","length","elem","DomUtils","isText","data","hasChildren","type","ElementType","Comment","Script","Style","context","keepScripts","parsed","load","remove","slice","fn","container","contained","next","parent","arr1","arr2","isArrayLike","newLength","len","item","Array","isArray","prototype","hasOwnProperty","call"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.merge = exports.contains = exports.root = exports.parseHTML = exports.text = exports.xml = exports.html = void 0;\nvar tslib_1 = require(\"tslib\");\nvar options_1 = tslib_1.__importStar(require(\"./options\"));\nvar cheerio_select_1 = require(\"cheerio-select\");\nvar htmlparser2_1 = require(\"htmlparser2\");\nvar parse5_1 = require(\"./parsers/parse5\");\nvar htmlparser2_2 = require(\"./parsers/htmlparser2\");\n/**\n * Helper function to render a DOM.\n *\n * @param that - Cheerio instance to render.\n * @param dom - The DOM to render. Defaults to `that`'s root.\n * @param options - Options for rendering.\n * @returns The rendered document.\n */\nfunction render(that, dom, options) {\n    var _a, _b;\n    if (!dom) {\n        if ((_a = that === null || that === void 0 ? void 0 : that._root) === null || _a === void 0 ? void 0 : _a.children) {\n            dom = that._root.children;\n        }\n        else {\n            return '';\n        }\n    }\n    else if (typeof dom === 'string') {\n        dom = cheerio_select_1.select(dom, (_b = that === null || that === void 0 ? void 0 : that._root) !== null && _b !== void 0 ? _b : [], options);\n    }\n    return options.xmlMode || options._useHtmlParser2\n        ? // FIXME: Pull in new version of dom-serializer to fix this.\n            htmlparser2_2.render(dom, options)\n        : parse5_1.render(dom);\n}\n/**\n * Checks if a passed object is an options object.\n *\n * @param dom - Object to check if it is an options object.\n * @returns Whether the object is an options object.\n */\nfunction isOptions(dom) {\n    return (typeof dom === 'object' &&\n        dom != null &&\n        !('length' in dom) &&\n        !('type' in dom));\n}\nfunction html(dom, options) {\n    /*\n     * Be flexible about parameters, sometimes we call html(),\n     * with options as only parameter\n     * check dom argument for dom element specific properties\n     * assume there is no 'length' or 'type' properties in the options object\n     */\n    if (!options && isOptions(dom)) {\n        options = dom;\n        dom = undefined;\n    }\n    /*\n     * Sometimes `$.html()` is used without preloading html,\n     * so fallback non-existing options to the default ones.\n     */\n    options = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, options_1.default), (this ? this._options : {})), options_1.flatten(options !== null && options !== void 0 ? options : {}));\n    return render(this || undefined, dom, options);\n}\nexports.html = html;\n/**\n * Render the document as XML.\n *\n * @param dom - Element to render.\n * @returns THe rendered document.\n */\nfunction xml(dom) {\n    var options = tslib_1.__assign(tslib_1.__assign({}, this._options), { xmlMode: true });\n    return render(this, dom, options);\n}\nexports.xml = xml;\n/**\n * Render the document as text.\n *\n * @param elements - Elements to render.\n * @returns The rendered document.\n */\nfunction text(elements) {\n    var elems = elements ? elements : this ? this.root() : [];\n    var ret = '';\n    for (var i = 0; i < elems.length; i++) {\n        var elem = elems[i];\n        if (htmlparser2_1.DomUtils.isText(elem))\n            ret += elem.data;\n        else if (htmlparser2_1.DomUtils.hasChildren(elem) &&\n            elem.type !== htmlparser2_1.ElementType.Comment &&\n            elem.type !== htmlparser2_1.ElementType.Script &&\n            elem.type !== htmlparser2_1.ElementType.Style) {\n            ret += text(elem.children);\n        }\n    }\n    return ret;\n}\nexports.text = text;\nfunction parseHTML(data, context, keepScripts) {\n    if (keepScripts === void 0) { keepScripts = typeof context === 'boolean' ? context : false; }\n    if (!data || typeof data !== 'string') {\n        return null;\n    }\n    if (typeof context === 'boolean') {\n        keepScripts = context;\n    }\n    var parsed = this.load(data, options_1.default, false);\n    if (!keepScripts) {\n        parsed('script').remove();\n    }\n    /*\n     * The `children` array is used by Cheerio internally to group elements that\n     * share the same parents. When nodes created through `parseHTML` are\n     * inserted into previously-existing DOM structures, they will be removed\n     * from the `children` array. The results of `parseHTML` should remain\n     * constant across these operations, so a shallow copy should be returned.\n     */\n    return parsed.root()[0].children.slice();\n}\nexports.parseHTML = parseHTML;\n/**\n * Sometimes you need to work with the top-level root element. To query it, you\n * can use `$.root()`.\n *\n * @example\n *\n * ```js\n * $.root().append('<ul id=\"vegetables\"></ul>').html();\n * //=> <ul id=\"fruits\">...</ul><ul id=\"vegetables\"></ul>\n * ```\n *\n * @returns Cheerio instance wrapping the root node.\n * @alias Cheerio.root\n */\nfunction root() {\n    var fn = this;\n    return fn(this._root);\n}\nexports.root = root;\n/**\n * Checks to see if the `contained` DOM element is a descendant of the\n * `container` DOM element.\n *\n * @param container - Potential parent node.\n * @param contained - Potential child node.\n * @returns Indicates if the nodes contain one another.\n * @alias Cheerio.contains\n * @see {@link https://api.jquery.com/jQuery.contains/}\n */\nfunction contains(container, contained) {\n    // According to the jQuery API, an element does not \"contain\" itself\n    if (contained === container) {\n        return false;\n    }\n    /*\n     * Step up the descendants, stopping when the root element is reached\n     * (signaled by `.parent` returning a reference to the same object)\n     */\n    var next = contained;\n    while (next && next !== next.parent) {\n        next = next.parent;\n        if (next === container) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.contains = contains;\n/**\n * $.merge().\n *\n * @param arr1 - First array.\n * @param arr2 - Second array.\n * @returns `arr1`, with elements of `arr2` inserted.\n * @alias Cheerio.merge\n * @see {@link https://api.jquery.com/jQuery.merge/}\n */\nfunction merge(arr1, arr2) {\n    if (!isArrayLike(arr1) || !isArrayLike(arr2)) {\n        return;\n    }\n    var newLength = arr1.length;\n    var len = +arr2.length;\n    for (var i = 0; i < len; i++) {\n        arr1[newLength++] = arr2[i];\n    }\n    arr1.length = newLength;\n    return arr1;\n}\nexports.merge = merge;\n/**\n * @param item - Item to check.\n * @returns Indicates if the item is array-like.\n */\nfunction isArrayLike(item) {\n    if (Array.isArray(item)) {\n        return true;\n    }\n    if (typeof item !== 'object' ||\n        !Object.prototype.hasOwnProperty.call(item, 'length') ||\n        typeof item.length !== 'number' ||\n        item.length < 0) {\n        return false;\n    }\n    for (var i = 0; i < item.length; i++) {\n        if (!(i in item)) {\n            return false;\n        }\n    }\n    return true;\n}\n"]},"metadata":{},"sourceType":"script"}